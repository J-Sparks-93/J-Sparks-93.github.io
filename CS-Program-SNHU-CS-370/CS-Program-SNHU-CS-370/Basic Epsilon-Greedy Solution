import numpy as np

class Maze:
    def __init__(self, layout, treasure_positions):
        self.layout = np.array(layout)
        self.treasure_positions = treasure_positions
        self.agent_position = self.reset()

    def reset(self):
        self.agent_position = (0, 0)  # Start position
        return self.agent_position

    def step(self, action):
        x, y = self.agent_position
        
        if action == 0:  # Up
            new_position = (max(x - 1, 0), y)
        elif action == 1:  # Down
            new_position = (min(x + 1, self.layout.shape[0] - 1), y)
        elif action == 2:  # Left
            new_position = (x, max(y - 1, 0))
        elif action == 3:  # Right
            new_position = (x, min(y + 1, self.layout.shape[1] - 1))
        
        self.agent_position = new_position
        reward = self.get_reward(new_position)
        return new_position, reward

    def get_reward(self, position):
        if position in self.treasure_positions:
            return 10  # Treasure found
        return -1  # Regular move penalty

class EpsilonGreedyPirate:
    def __init__(self, n_actions, epsilon=0.1):
        self.n_actions = n_actions
        self.epsilon = epsilon
        self.q_values = np.zeros(n_actions)  # Action-value estimates
        self.action_count = np.zeros(n_actions)  # Action counts

    def select_action(self):
        if np.random.rand() < self.epsilon:
            return np.random.randint(self.n_actions)  # Explore
        else:
            return np.argmax(self.q_values)  # Exploit

    def update(self, action, reward):
        self.action_count[action] += 1
        self.q_values[action] += (reward - self.q_values[action]) / self.action_count[action]

# Example usage
layout = [
    [0, 0, 0, 0],
    [0, -1, -1, 0],
    [0, 0, 0, 0],
    [0, 0, -1, 10]  # Treasure at (3, 3)
]
treasure_positions = [(3, 3)]

maze = Maze(layout, treasure_positions)
pirate = EpsilonGreedyPirate(n_actions=4)

episodes = 1000

for episode in range(episodes):
    state = maze.reset()
    done = False
    
    while not done:
        action = pirate.select_action()
        new_state, reward = maze.step(action)
        
        # Check if treasure was found
        if reward == 10:
            done = True
        
        pirate.update(action, reward)

print("Estimated action values:", pirate.q_values)
